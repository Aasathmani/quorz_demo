// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show TargetPlatform, defaultTargetPlatform, kIsWeb;
import 'package:app_qoruz/config.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return _getWebOption(Config.appFlavor);
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for android - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        /*throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );*/
        return _getWebOption(Config.appFlavor);
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions _getWebOption(Flavor flavor) {
    if (flavor is Production) {
      return const FirebaseOptions(
        apiKey: "AIzaSyDleI6-dTzCt3evKYz9qf8txla1vp7F4IU",
        authDomain: "thinkhub-app.firebaseapp.com",
        projectId: "thinkhub-app",
        storageBucket: "thinkhub-app.appspot.com",
        messagingSenderId: "111740542",
        appId: "1:111740542:web:1c3ea30e32bc2eb67b3a2f",
        measurementId: "G-S4RC9YKHB7",
      );
    } else if (flavor is Staging) {
      return const FirebaseOptions(
        apiKey: "AIzaSyDleI6-dTzCt3evKYz9qf8txla1vp7F4IU",
        authDomain: "thinkhub-app.firebaseapp.com",
        projectId: "thinkhub-app",
        storageBucket: "thinkhub-app.appspot.com",
        messagingSenderId: "111740542",
        appId: "1:111740542:web:f2b272f30e48dc1a7b3a2f",
        measurementId: "G-B2HKK99LLZ",
      );
    } else if (flavor is QA) {
      return const FirebaseOptions(
        apiKey: "AIzaSyDleI6-dTzCt3evKYz9qf8txla1vp7F4IU",
        authDomain: "thinkhub-app.firebaseapp.com",
        projectId: "thinkhub-app",
        storageBucket: "thinkhub-app.appspot.com",
        messagingSenderId: "111740542",
        appId: "1:111740542:web:e0f0cfe3a672e5e67b3a2f",
        measurementId: "G-QJJMNLVS59",
      );
    } else {
      return const FirebaseOptions(
        apiKey: "AIzaSyDleI6-dTzCt3evKYz9qf8txla1vp7F4IU",
        authDomain: "thinkhub-app.firebaseapp.com",
        projectId: "thinkhub-app",
        storageBucket: "thinkhub-app.appspot.com",
        messagingSenderId: "111740542",
        appId: "1:111740542:web:85551e9e67e185657b3a2f",
        measurementId: "G-M167QQ2J0R",
      );
    }
  }
}
